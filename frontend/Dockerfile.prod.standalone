# Build stage
FROM node:20-slim as build

WORKDIR /usr/workspace

# package.json 먼저 복사 (캐시 최적화)
COPY package*.json ./

# 모든 의존성 설치 (빌드에 필요한 devDependencies 포함)
RUN npm ci

# 소스 코드 복사
COPY . .

# 프로덕션 빌드
RUN npm run build

# Production stage
FROM nginx:alpine as production

# nginx 설정을 직접 생성 (외부 파일 의존성 제거)
RUN echo 'events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; location / { root /usr/share/nginx/html; index index.html index.htm; try_files $uri $uri/ /index.html; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } }' > /etc/nginx/nginx.conf

# 빌드된 파일 복사
COPY --from=build /usr/workspace/build /usr/share/nginx/html

# nginx가 필요로 하는 모든 디렉토리들을 미리 생성하고 권한 설정
RUN mkdir -p /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp /var/cache/nginx/fastcgi_temp /var/cache/nginx/uwsgi_temp /var/cache/nginx/scgi_temp \
    && mkdir -p /var/run /var/log/nginx \
    && chown -R nginx:nginx /var/cache/nginx /var/run /var/log/nginx \
    && chown -R nginx:nginx /usr/share/nginx/html \
    && chmod 755 /var/cache/nginx \
    && chmod 777 /var/run \
    && chmod 755 /var/log/nginx \
    && find /usr/share/nginx/html -type d -exec chmod 755 {} \; \
    && find /usr/share/nginx/html -type f -exec chmod 644 {} \;

# 비root 사용자로 전환
USER nginx

# 80포트 노출
EXPOSE 80

# nginx 시작
CMD ["nginx", "-g", "daemon off;"]
