# portainer 볼륨생성
docker volume create portainer_data

# portainer 컨테이너 기동
docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:lts

# portainer 브라우저에서 접속
https://localhost:9443

------------------------------------------------------------------------------------------------

# dockerdesktop 사용안하는법
# wsl 인스톨
wsl --install -d Ubuntu

# 인스톨한 환경 진입
wsl -d Ubuntu

# 인스톨한 환경 나오기
exit

# WSL2 안에 Docker 설치
sudo apt update
sudo apt install -y docker.io

# Docker Daemon 실행
sudo dockerd

# Docker Daemon 실행중인지 확인
ps aux | grep dockerd

# portainer 볼륨생성
sudo docker volume create portainer_data

sudo docker run -d \
  -p 9000:9000 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v portainer_data:/data \
  --name portainer \
  portainer/portainer-ce

# 브라우저에서 접속
http://localhost:9000 

------------------------------------------------------------------
# 유저에 권한주기

sudo usermod -aG sudo runicks

sudo usermod -aG docker runicks

---------------------------------------------------------------------
# docker compose 설치

1. 도커 컴포즈 설치
sudo curl -L "https://github.com/docker/compose/releases/download/v2.39.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

버전은 아래링크를 참조하여 수정
https://github.com/docker/compose/releases

2. 도커 컴포즈 권한 부여
sudo chmod +x /usr/local/bin/docker-compose

3. 심볼릭 링크 연결
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
 

4. 버전 확인
docker-compose --version

---------------------------------------------------------------------

# 실행 중 컨테이너 확인
docker ps

# 모든 컨테이너 확인 (종료 포함)
docker ps -a

# 실행 중인 컨테이너 모두 종료
docker stop $(docker ps -aq)

# 모든 컨테이너 삭제
docker rm $(docker ps -aq)

# 현재 이미지 확인
docker images

# 모든 이미지 삭제
docker rmi $(docker images -q)

# 강제로 삭제 (컨테이너가 걸려 있을 때)
docker rmi -f $(docker images -q)

# 볼륨 목록
docker volume ls

# 모든 볼륨 삭제
docker volume rm $(docker volume ls -q)

# 네트워크 목록
docker network ls

# 기본 bridge/host/none 제외하고 삭제
docker network rm $(docker network ls -q)

# 멈춘 컨테이너, 사용하지 않는 네트워크, dangling 이미지 삭제
docker system prune

# 진짜 다 삭제 (컨테이너/이미지/볼륨/네트워크 모두)
docker system prune -a --volumes