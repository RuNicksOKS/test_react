version: '3.7'

services:
  backend:
    build: ./backend
    container_name: "backend-dev"
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - '8000:8000'
    #   - '9000:9000'
    # command:
    #   - sh
    #   - -c
    #   - |
    #     pip install debugpy &&
    #     python -m debugpy --listen 0.0.0.0:9000 --wait-for-client manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend/:/usr/workspace/
    networks:
      - dev
    depends_on:
      - db
    env_file:
      - ./.env.backend.dev
    stdin_open: true
    tty: true

  frontend:
    build: ./frontend
    container_name: "frontend-dev"
    volumes:
      - ./frontend:/usr/workspace
      - node-modules:/usr/workspace/node_modules
    networks:
      - dev
    ports:
      - '3000:3000'
    stdin_open: true
    environment:
      - NODE_ENV=development
    depends_on:
      - "backend"
    command:
      npm start

  db:
    # image: postgres:13.2-alpine
    image: postgres:15.3-alpine
    container_name: "db-dev"
    volumes:
      - ./volumes/db/postgres_data:/var/lib/postgresql/data
      # - ./database_setting/initial_data.sql:/docker-entrypoint-initdb.d/initial_data.sql
    user: 0:1000
    ports:
      - '5432:5432'
    networks:
      - dev
    env_file:
      - ./.env.db.dev
    # environment:
    #   - POSTGRES_USER=XXXX
    #   - POSTGRES_PASSWORD=XXXX
    #   - POSTGRES_DB=XXXX

  pgadmin:
    image: dpage/pgadmin4:8.1
    container_name: "pgadmin-dev"
    # restart: always
    ports:
      - '5050:80'
    # environment:
    #   - PGADMIN_DEFAULT_EMAIL=XXXX
    #   - PGADMIN_DEFAULT_PASSWORD=XXXX
    volumes:
      - ./volumes/pgadmin/data/pgadmin/:/var/lib/pgadmin
      # - ./database_setting/config_local.py:/pgadmin4/config_local.py
    # user: 0:1000
    depends_on:
      - db
    networks:
      - dev
    env_file:
      - ./.env.pgadmin.dev
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  node-modules:

networks:
  dev:
