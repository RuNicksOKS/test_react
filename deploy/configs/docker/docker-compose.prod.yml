version: '3.9'

services:
  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      target: production
    container_name: "backend-app-prod"
    command: gunicorn app.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    volumes:
      - static_volume:/usr/workspace/static
      - media_volume:/usr/workspace/media
    networks:
      - prod
    expose:
      - 8000
    env_file:
      - ./env/.env.prod
    depends_on:
      - db-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
    container_name: "frontend-prod"
    volumes:
      - static_volume:/usr/workspace/static
    networks:
      - prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    depends_on:
      - "backend-prod"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db-prod:
    image: postgres:15.3-alpine
    container_name: "db-prod"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - prod
    env_file:
      - ./env/.env.prod.db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx-prod:
    image: nginx:alpine
    container_name: "nginx-prod"
    volumes:
      - ${PROJECT_ROOT:-../../}/deploy/configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${PROJECT_ROOT:-../../}/deploy/configs/nginx/ssl:/etc/nginx/ssl
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
    ports:
      - "80:80"
      - "443:443"
    networks:
      - prod
    depends_on:
      - frontend-prod
      - backend-prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  static_volume:
  media_volume:

networks:
  prod:
    driver: bridge
